# Docker Compose for Production - Traefik Gateway with Advanced Load Balancer

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik-gateway-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8888:8080"  # Traefik dashboard
    environment:
      - TRAEFIK_LOG_LEVEL=INFO
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      # SSL/TLS Configuration
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=admin@apifincheck.husanenglish.online
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/letsencrypt/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
      # Load Balancer Configuration
      - TRAEFIK_SERVICES_LOADBALANCER_HEALTHCHECK_PATH=/health
      - TRAEFIK_SERVICES_LOADBALANCER_HEALTHCHECK_INTERVAL=5s
      - TRAEFIK_SERVICES_LOADBALANCER_HEALTHCHECK_TIMEOUT=3s
      - TRAEFIK_SERVICES_LOADBALANCER_HEALTHCHECK_RETRIES=3
      # Circuit Breaker
      - TRAEFIK_HTTP_MIDDLEWARES_CIRCUITBREAKER_EXPRESSION=NetworkErrorRatio() > 0.2
      # Rate Limiting
      - TRAEFIK_HTTP_MIDDLEWARES_RATELIMIT_BURST=200
      - TRAEFIK_HTTP_MIDDLEWARES_RATELIMIT_AVERAGE=100
      # Security Headers
      - TRAEFIK_HTTP_MIDDLEWARES_SECURITY_HEADERS_FORCESTSHEADER=true
      - TRAEFIK_HTTP_MIDDLEWARES_SECURITY_HEADERS_FRAMEDENY=true
      - TRAEFIK_HTTP_MIDDLEWARES_SECURITY_HEADERS_CONTENTTYPENOSNIFF=true
      - TRAEFIK_HTTP_MIDDLEWARES_SECURITY_HEADERS_BROWSERXSSFILTER=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - traefik-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.apifincheck.husanenglish.online`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=security-headers

  backend1:
    build:
      context: ./backend1
      dockerfile: Dockerfile
    container_name: backend1-nodejs-prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - traefik-network
    labels:
      - traefik.enable=true
      # Router configuration
      - traefik.http.routers.backend1.rule=Host(`apifincheck.husanenglish.online`) && (PathPrefix(`/auth/`) || PathPrefix(`/users/`))
      - traefik.http.routers.backend1.entrypoints=websecure
      - traefik.http.routers.backend1.tls.certresolver=letsencrypt
      - traefik.http.routers.backend1.service=backend1-service
      - traefik.http.routers.backend1.middlewares=ratelimit,circuitbreaker,compression,security-headers
      # Service configuration with advanced load balancing
      - traefik.http.services.backend1-service.loadbalancer.server.port=3000
      - traefik.http.services.backend1-service.loadbalancer.healthcheck.path=/health
      - traefik.http.services.backend1-service.loadbalancer.healthcheck.interval=5s
      - traefik.http.services.backend1-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.backend1-service.loadbalancer.healthcheck.retries=3
      - traefik.http.services.backend1-service.loadbalancer.sticky.cookie=true
      - traefik.http.services.backend1-service.loadbalancer.sticky.cookie.name=backend1-sticky
      - traefik.http.services.backend1-service.loadbalancer.sticky.cookie.secure=true
      - traefik.http.services.backend1-service.loadbalancer.sticky.cookie.httponly=true
      # Middleware configuration
      - traefik.http.middlewares.ratelimit.ratelimit.burst=200
      - traefik.http.middlewares.ratelimit.ratelimit.average=100
      - traefik.http.middlewares.circuitbreaker.circuitbreaker.expression=NetworkErrorRatio() > 0.2
      - traefik.http.middlewares.compression.compress=true
      - traefik.http.middlewares.security-headers.headers.forcestsheader=true
      - traefik.http.middlewares.security-headers.headers.framedeny=true
      - traefik.http.middlewares.security-headers.headers.contenttypenosniff=true
      - traefik.http.middlewares.security-headers.headers.browserxssfilter=true

  backend2:
    build:
      context: ./backend2
      dockerfile: Dockerfile
    container_name: backend2-python-prod
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - ENV=production
      - PORT=8000
    networks:
      - traefik-network
    labels:
      - traefik.enable=true
      # Router configuration
      - traefik.http.routers.backend2.rule=Host(`apifincheck.husanenglish.online`) && (PathPrefix(`/products/`) || PathPrefix(`/docs/`))
      - traefik.http.routers.backend2.entrypoints=websecure
      - traefik.http.routers.backend2.tls.certresolver=letsencrypt
      - traefik.http.routers.backend2.service=backend2-service
      - traefik.http.routers.backend2.middlewares=ratelimit,circuitbreaker,compression,security-headers
      # Service configuration with advanced load balancing
      - traefik.http.services.backend2-service.loadbalancer.server.port=8000
      - traefik.http.services.backend2-service.loadbalancer.healthcheck.path=/health
      - traefik.http.services.backend2-service.loadbalancer.healthcheck.interval=5s
      - traefik.http.services.backend2-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.backend2-service.loadbalancer.healthcheck.retries=3
      - traefik.http.services.backend2-service.loadbalancer.sticky.cookie=true
      - traefik.http.services.backend2-service.loadbalancer.sticky.cookie.name=backend2-sticky
      - traefik.http.services.backend2-service.loadbalancer.sticky.cookie.secure=true
      - traefik.http.services.backend2-service.loadbalancer.sticky.cookie.httponly=true

  backend3:
    build:
      context: ./backend3
      dockerfile: Dockerfile
    container_name: backend3-java-prod
    restart: unless-stopped
    expose:
      - "8080"
    environment:
      - ENV=production
      - PORT=8080
    networks:
      - traefik-network
    labels:
      - traefik.enable=true
      # Router configuration
      - traefik.http.routers.backend3.rule=Host(`apifincheck.husanenglish.online`) && PathPrefix(`/orders/`)
      - traefik.http.routers.backend3.entrypoints=websecure
      - traefik.http.routers.backend3.tls.certresolver=letsencrypt
      - traefik.http.routers.backend3.service=backend3-service
      - traefik.http.routers.backend3.middlewares=ratelimit,circuitbreaker,compression,security-headers
      # Service configuration with advanced load balancing
      - traefik.http.services.backend3-service.loadbalancer.server.port=8080
      - traefik.http.services.backend3-service.loadbalancer.healthcheck.path=/health
      - traefik.http.services.backend3-service.loadbalancer.healthcheck.interval=5s
      - traefik.http.services.backend3-service.loadbalancer.healthcheck.timeout=3s
      - traefik.http.services.backend3-service.loadbalancer.healthcheck.retries=3
      - traefik.http.services.backend3-service.loadbalancer.sticky.cookie=true
      - traefik.http.services.backend3-service.loadbalancer.sticky.cookie.name=backend3-sticky
      - traefik.http.services.backend3-service.loadbalancer.sticky.cookie.secure=true
      - traefik.http.services.backend3-service.loadbalancer.sticky.cookie.httponly=true

  # Health check service
  health-check:
    image: nginx:alpine
    container_name: health-check-prod
    restart: unless-stopped
    expose:
      - "80"
    networks:
      - traefik-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.health.rule=Host(`apifincheck.husanenglish.online`) && Path(`/health`)
      - traefik.http.routers.health.entrypoints=websecure
      - traefik.http.routers.health.tls.certresolver=letsencrypt
      - traefik.http.routers.health.service=health-service
      - traefik.http.services.health-service.loadbalancer.server.port=80
    volumes:
      - ./traefik/health.html:/usr/share/nginx/html/index.html

volumes:
  traefik_letsencrypt:

networks:
  traefik-network:
    driver: bridge
